/*
 * This file is generated by jOOQ.
 */
package ca.nanometrics.halo.db.tables;


import ca.nanometrics.halo.db.Halo;
import ca.nanometrics.halo.db.Indexes;
import ca.nanometrics.halo.db.Keys;
import ca.nanometrics.halo.db.tables.records.AssetTypeRecord;
import ca.nanometrics.util.jooq.converter.InstantLocalDateTimeConverter;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetType extends TableImpl<AssetTypeRecord> {

    private static final long serialVersionUID = -1032945543;

    /**
     * The reference instance of <code>halo.asset_type</code>
     */
    public static final AssetType ASSET_TYPE = new AssetType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetTypeRecord> getRecordType() {
        return AssetTypeRecord.class;
    }

    /**
     * The column <code>halo.asset_type.asset_type_id</code>.
     */
    public final TableField<AssetTypeRecord, Integer> ASSET_TYPE_ID = createField("asset_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('halo.asset_type_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>halo.asset_type.asset_type_name</code>.
     */
    public final TableField<AssetTypeRecord, String> ASSET_TYPE_NAME = createField("asset_type_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>halo.asset_type.created_at</code>.
     */
    public final TableField<AssetTypeRecord, Instant> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "", new InstantLocalDateTimeConverter());

    /**
     * The column <code>halo.asset_type.updated_at</code>.
     */
    public final TableField<AssetTypeRecord, Instant> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "", new InstantLocalDateTimeConverter());

    /**
     * Create a <code>halo.asset_type</code> table reference
     */
    public AssetType() {
        this(DSL.name("asset_type"), null);
    }

    /**
     * Create an aliased <code>halo.asset_type</code> table reference
     */
    public AssetType(String alias) {
        this(DSL.name(alias), ASSET_TYPE);
    }

    /**
     * Create an aliased <code>halo.asset_type</code> table reference
     */
    public AssetType(Name alias) {
        this(alias, ASSET_TYPE);
    }

    private AssetType(Name alias, Table<AssetTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssetType(Name alias, Table<AssetTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AssetType(Table<O> child, ForeignKey<O, AssetTypeRecord> key) {
        super(child, key, ASSET_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Halo.HALO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSET_TYPE_ASSET_TYPE_NAME_KEY, Indexes.ASSET_TYPE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssetTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASSET_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssetTypeRecord> getPrimaryKey() {
        return Keys.ASSET_TYPE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssetTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<AssetTypeRecord>>asList(Keys.ASSET_TYPE_PKEY, Keys.ASSET_TYPE_ASSET_TYPE_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetType as(String alias) {
        return new AssetType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssetType as(Name alias) {
        return new AssetType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetType rename(String name) {
        return new AssetType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssetType rename(Name name) {
        return new AssetType(name, null);
    }
}
