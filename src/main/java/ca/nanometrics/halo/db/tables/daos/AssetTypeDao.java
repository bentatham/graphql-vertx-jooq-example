/*
 * This file is generated by jOOQ.
 */
package ca.nanometrics.halo.db.tables.daos;


import ca.nanometrics.halo.db.tables.AssetType;
import ca.nanometrics.halo.db.tables.records.AssetTypeRecord;

import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;

import java.time.Instant;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.jdbc.JDBCRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetTypeDao extends AbstractVertxDAO<AssetTypeRecord, ca.nanometrics.halo.db.tables.pojos.AssetType, Integer, Single<List<ca.nanometrics.halo.db.tables.pojos.AssetType>>, Single<Optional<ca.nanometrics.halo.db.tables.pojos.AssetType>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<AssetTypeRecord,ca.nanometrics.halo.db.tables.pojos.AssetType,Integer> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public AssetTypeDao(Configuration configuration, io.vertx.reactivex.core.Vertx vertx) {
        super(AssetType.ASSET_TYPE, ca.nanometrics.halo.db.tables.pojos.AssetType.class, new JDBCRXQueryExecutor<AssetTypeRecord,ca.nanometrics.halo.db.tables.pojos.AssetType,Integer>(configuration,ca.nanometrics.halo.db.tables.pojos.AssetType.class,vertx));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(ca.nanometrics.halo.db.tables.pojos.AssetType object) {
        return object.getAssetTypeId();
    }

    /**
     * Find records that have <code>asset_type_name IN (values)</code> asynchronously
     */
    public Single<List<ca.nanometrics.halo.db.tables.pojos.AssetType>> findManyByAssetTypeName(List<String> values) {
        return findManyByCondition(AssetType.ASSET_TYPE.ASSET_TYPE_NAME.in(values));
    }

    /**
     * Find a unique record that has <code>asset_type_name = value</code> asynchronously
     */
    public Single<Optional<ca.nanometrics.halo.db.tables.pojos.AssetType>> findOneByAssetTypeName(String value) {
        return findOneByCondition(AssetType.ASSET_TYPE.ASSET_TYPE_NAME.eq(value));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Single<List<ca.nanometrics.halo.db.tables.pojos.AssetType>> findManyByCreatedAt(List<Instant> values) {
        return findManyByCondition(AssetType.ASSET_TYPE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>updated_at IN (values)</code> asynchronously
     */
    public Single<List<ca.nanometrics.halo.db.tables.pojos.AssetType>> findManyByUpdatedAt(List<Instant> values) {
        return findManyByCondition(AssetType.ASSET_TYPE.UPDATED_AT.in(values));
    }

    @Override
    public JDBCRXQueryExecutor<AssetTypeRecord,ca.nanometrics.halo.db.tables.pojos.AssetType,Integer> queryExecutor(){
        return (JDBCRXQueryExecutor<AssetTypeRecord,ca.nanometrics.halo.db.tables.pojos.AssetType,Integer>) super.queryExecutor();
    }
}
