/*
 * This file is generated by jOOQ.
 */
package ca.nanometrics.halo.db;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import ca.nanometrics.halo.db.tables.Asset;
import ca.nanometrics.halo.db.tables.AssetType;
import ca.nanometrics.halo.db.tables.Organization;
import ca.nanometrics.halo.db.tables.User;
import ca.nanometrics.halo.db.tables.records.AssetRecord;
import ca.nanometrics.halo.db.tables.records.AssetTypeRecord;
import ca.nanometrics.halo.db.tables.records.OrganizationRecord;
import ca.nanometrics.halo.db.tables.records.UserRecord;

/**
 * A class modelling foreign key relationships and constraints of tables of the <code>halo</code> schema.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.7" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys
{

  // -------------------------------------------------------------------------
  // IDENTITY definitions
  // -------------------------------------------------------------------------

  public static final Identity<AssetRecord, Integer> IDENTITY_ASSET = Identities0.IDENTITY_ASSET;
  public static final Identity<AssetTypeRecord, Integer> IDENTITY_ASSET_TYPE = Identities0.IDENTITY_ASSET_TYPE;
  public static final Identity<OrganizationRecord, Integer> IDENTITY_ORGANIZATION = Identities0.IDENTITY_ORGANIZATION;
  public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  public static final UniqueKey<AssetRecord> ASSET_PKEY = UniqueKeys0.ASSET_PKEY;
  public static final UniqueKey<AssetRecord> ASSET_SERIAL_NUMBER_KEY = UniqueKeys0.ASSET_SERIAL_NUMBER_KEY;
  public static final UniqueKey<AssetTypeRecord> ASSET_TYPE_PKEY = UniqueKeys0.ASSET_TYPE_PKEY;
  public static final UniqueKey<AssetTypeRecord> ASSET_TYPE_ASSET_TYPE_NAME_KEY =
      UniqueKeys0.ASSET_TYPE_ASSET_TYPE_NAME_KEY;
  public static final UniqueKey<OrganizationRecord> ORGANIZATION_PKEY = UniqueKeys0.ORGANIZATION_PKEY;
  public static final UniqueKey<OrganizationRecord> ORGANIZATION_ORGANIZATION_NAME_KEY =
      UniqueKeys0.ORGANIZATION_ORGANIZATION_NAME_KEY;
  public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;
  public static final UniqueKey<UserRecord> USER_EMAIL_KEY = UniqueKeys0.USER_EMAIL_KEY;

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  public static final ForeignKey<AssetRecord, OrganizationRecord> ASSET__ASSET_ORGANIZATION_ID_FKEY =
      ForeignKeys0.ASSET__ASSET_ORGANIZATION_ID_FKEY;
  public static final ForeignKey<AssetRecord, AssetTypeRecord> ASSET__ASSET_ASSET_TYPE_ID_FKEY =
      ForeignKeys0.ASSET__ASSET_ASSET_TYPE_ID_FKEY;

  // -------------------------------------------------------------------------
  // [#1459] distribute members to avoid static initialisers > 64kb
  // -------------------------------------------------------------------------

  private static class Identities0
  {
    public static Identity<AssetRecord, Integer> IDENTITY_ASSET =
        Internal.createIdentity(Asset.ASSET, Asset.ASSET.ASSET_ID);
    public static Identity<AssetTypeRecord, Integer> IDENTITY_ASSET_TYPE =
        Internal.createIdentity(AssetType.ASSET_TYPE, AssetType.ASSET_TYPE.ASSET_TYPE_ID);
    public static Identity<OrganizationRecord, Integer> IDENTITY_ORGANIZATION =
        Internal.createIdentity(Organization.ORGANIZATION, Organization.ORGANIZATION.ORGANIZATION_ID);
    public static Identity<UserRecord, Integer> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.USER_ID);
  }

  private static class UniqueKeys0
  {
    public static final UniqueKey<AssetRecord> ASSET_PKEY =
        Internal.createUniqueKey(Asset.ASSET, "asset_pkey", Asset.ASSET.ASSET_ID);
    public static final UniqueKey<AssetRecord> ASSET_SERIAL_NUMBER_KEY =
        Internal.createUniqueKey(Asset.ASSET, "asset_serial_number_key", Asset.ASSET.SERIAL_NUMBER);
    public static final UniqueKey<AssetTypeRecord> ASSET_TYPE_PKEY =
        Internal.createUniqueKey(AssetType.ASSET_TYPE, "asset_type_pkey", AssetType.ASSET_TYPE.ASSET_TYPE_ID);
    public static final UniqueKey<AssetTypeRecord> ASSET_TYPE_ASSET_TYPE_NAME_KEY = Internal
        .createUniqueKey(AssetType.ASSET_TYPE, "asset_type_asset_type_name_key", AssetType.ASSET_TYPE.ASSET_TYPE_NAME);
    public static final UniqueKey<OrganizationRecord> ORGANIZATION_PKEY = Internal
        .createUniqueKey(Organization.ORGANIZATION, "organization_pkey", Organization.ORGANIZATION.ORGANIZATION_ID);
    public static final UniqueKey<OrganizationRecord> ORGANIZATION_ORGANIZATION_NAME_KEY = Internal.createUniqueKey(
        Organization.ORGANIZATION, "organization_organization_name_key", Organization.ORGANIZATION.ORGANIZATION_NAME);
    public static final UniqueKey<UserRecord> USER_PKEY =
        Internal.createUniqueKey(User.USER, "user_pkey", User.USER.USER_ID);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY =
        Internal.createUniqueKey(User.USER, "user_email_key", User.USER.EMAIL);
  }

  private static class ForeignKeys0
  {
    public static final ForeignKey<AssetRecord, OrganizationRecord> ASSET__ASSET_ORGANIZATION_ID_FKEY =
        Internal.createForeignKey(ca.nanometrics.halo.db.Keys.ORGANIZATION_PKEY, Asset.ASSET,
            "asset__asset_organization_id_fkey", Asset.ASSET.ORGANIZATION_ID);
    public static final ForeignKey<AssetRecord, AssetTypeRecord> ASSET__ASSET_ASSET_TYPE_ID_FKEY =
        Internal.createForeignKey(ca.nanometrics.halo.db.Keys.ASSET_TYPE_PKEY, Asset.ASSET,
            "asset__asset_asset_type_id_fkey", Asset.ASSET.ASSET_TYPE_ID);
    public static final ForeignKey<UserRecord, OrganizationRecord> USER__USER_ORGANIZATION_ID_FKEY =
        Internal.createForeignKey(ca.nanometrics.halo.db.Keys.ORGANIZATION_PKEY, User.USER,
            "user__user_organization_id_fkey", User.USER.ORGANIZATION_ID);
  }
}
